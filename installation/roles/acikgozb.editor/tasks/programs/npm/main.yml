- name: "Get the installed Node version."
  become_user: "{{ dotfiles_user }}"
  ansible.builtin.shell:
    cmd: source {{ xdg_config_home }}/{{ dotfiles_shell }}/.{{ dotfiles_shell }}rc && node --version
    executable: "{{ dotfiles_shell_executable_path }}"
  register: node_version_out
  changed_when: true

- name: "Create a symlink for Node under /usr/bin."
  ansible.builtin.file:
    src: "{{ xdg_bin_home }}/nvm/versions/node/{{ node_version_out.stdout }}/bin/node"
    path: /usr/bin/node
    state: link

- name: "Install tools under $XDG_BIN_HOME."
  become_user: "{{ dotfiles_user }}"
  block:
    - name: "Install packages via 'npm install'."
      community.general.npm:
        name: "{{ item.name }}"
        state: present
        executable: "{{ js_lang_path }}/versions/node/{{ node_version_out.stdout }}/bin/npm"
        path: "{{ npm_pkg_path }}"
      with_items: "{{ programs.npm_install }}"

    - name: "Find binaries that comes with packages."
      ansible.builtin.find:
        path: "{{ npm_pkg_path }}/node_modules/{{ item.name }}/bin/"
        depth: 1
      register: "find_out"
      loop: "{{ programs.npm_install }}"

    - name: "Ensure that npm_pkg_path exists for tools installed with 'npm install'."
      ansible.builtin.file:
        path: "{{ npm_pkg_path }}"
        state: directory
        owner: "{{ dotfiles_user }}"
        group: "{{ dotfiles_user_group }}"
        mode: "0755"

    - name: "Ensure that the installed tools have symlinks under npm_pkg_path."
      ansible.builtin.file:
        src: "{{ item.path }}"
        dest: "{{ npm_pkg_path }}/{{ item.path | split('/') | last | split('.') | first }}"
        state: link
        owner: "{{ dotfiles_user }}"
        group: "{{ dotfiles_user_group }}"
        force: true
        follow: false
      with_items: "{{ find_out.results | map(attribute='files') | flatten }}"

- name: "Remove Node symlink after installation."
  ansible.builtin.file:
    path: /usr/bin/node
    state: absent
