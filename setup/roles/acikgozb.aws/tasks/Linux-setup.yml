- name: Ensure that AWS CLI follows XDG Base Directory spec.
  become_user: "{{ lookup('env', 'USER') }}"
  ansible.builtin.blockinfile:
    path: ~/.config/{{ shell }}/.{{ shell }}rc
    insertafter: EOF
    marker_begin: "AWS CLI XDG Base Directory -"
    block: |
      export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME"/aws/credentials
      export AWS_CONFIG_FILE="$XDG_CONFIG_HOME"/aws/config
    prepend_newline: true
    append_newline: true

- name: Download AWS CLI archive.
  ansible.builtin.get_url:
    url: "{{ aws_archive_url[arch] }}"
    dest: /tmp
    mode: "0755"

- name: Install unzip.
  ansible.builtin.package:
    name: unzip
    state: present

- name: Create the temporary folder to store the unarchived files.
  ansible.builtin.file:
    path: /tmp/awscli
    state: directory
    mode: "0755"

- name: Unarchive AWS CLI download.
  ansible.builtin.unarchive:
    remote_src: true
    src: /tmp/{{ aws_archive_url[arch] | split('/') | last }}
    dest: /tmp/awscli

- name: Run the installer.
  become_user: "{{ lookup('env', 'USER') }}"
  ansible.builtin.command:
    cmd: /tmp/awscli/aws/install --bin-dir {{ aws_bin_dir }} --install-dir {{ aws_install_dir }}
  changed_when: true

- name: Ensure that aws_bin_dir exists in $PATH.
  become_user: "{{ lookup('env', 'USER' ) }}"
  ansible.builtin.blockinfile:
    path: ~/.config/{{ shell }}/.{{ shell }}rc
    insertafter: EOF
    marker_begin: "AWS CLI lookup -"
    block: |
      if ! grep -q "{{ aws_bin_dir }}:" <<< "$PATH"; then
        export PATH="{{ aws_bin_dir }}:$PATH"
      fi
    prepend_newline: true
    append_newline: true

- name: Remove temporary files.
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/awscli
    - /tmp/{{ aws_archive_url[arch] | split('/') | last }}
