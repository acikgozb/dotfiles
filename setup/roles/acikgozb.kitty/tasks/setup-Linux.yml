- name: Install the font used by Kitty.
  block:
    - name: Prepare the font folder.
      ansible.builtin.file:
        path: /usr/share/fonts/ubuntu-mono-nerd-font
        state: directory
        mode: "0755"

    - name: Download the UbuntuMono Nerd Font.
      ansible.builtin.get_url:
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/UbuntuMono.tar.xz
        dest: /tmp

    - name: Prepare the folder to extract the fonts.
      ansible.builtin.file:
        path: /tmp/UbuntuMono
        state: directory
        mode: "0755"

    - name: Unarchive the binary from download.
      ansible.builtin.unarchive:
        remote_src: true
        src: /tmp/UbuntuMono.tar.xz
        dest: /tmp/UbuntuMono

    - name: Move the font to the font folder.
      ansible.builtin.shell:
        cmd: "bash -c 'mv /tmp/UbuntuMono/UbuntuMonoNerdFont*.ttf /usr/share/fonts/ubuntu-mono-nerd-font/'"

    - name: Cleanup the download and the old archive.
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/UbuntuMono
        - /tmp/UbuntuMono.tar.xz

    - name: "[OS Specific] Install fc-cache."
      ansible.builtin.package:
        name: "{{ fc_cache[ansible_os_family] }}"
        state: present

    - name: Reload the system fonts, to enable the installed font.
      ansible.builtin.shell:
        cmd: "fc-cache -f -v"
      changed_when: false

- name: Install and configure Kitty.
  become_user: "{{ lookup('env', 'USER') }}"
  block:
    - name: Ensure the current user has a .local folder under $HOME.
      ansible.builtin.file:
        path: ~/.local
        state: directory
        mode: "0755"

    - name: Download and run the installer.
      ansible.builtin.shell:
        cmd: curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin

    - name: Ensure that $XDG_CONFIG_HOME/kitty exists.
      ansible.builtin.file:
        path: ~/.config/kitty
        state: directory

    - name: Ensure that the configuration files are symlinked to $XDG_CONFIG_HOME/kitty. 
      ansible.builtin.file:
        src: "{{ role_path }}/files/{{ item }}"
        dest: ~/.config/kitty/{{ item }}
        force: true
        state: link
      with_items:
        - assets
        - themes
        - current-theme.conf
        - kitty.conf
        
- name: Ensure that Kitty can be executed from an icon, instead of TUI only.
  become_user: "{{ lookup('env', 'USER') }}"
  block:
    - name: Ensure that symlinks exist for kitty and kitten, which are under $PATH.
      ansible.builtin.file:
        src: ~/.local/kitty.app/bin/{{ item }}
        dest: ~/bin/prebuilt/{{ item }}
        state: link
        force: true
      with_items:
        - kitty
        - kitten

    - name: Place the kitty.desktop file under applications.
      ansible.builtin.copy:
        src: ~/.local/kitty.app/share/applications/kitty.desktop 
        dest: ~/.local/share/applications

    - name: Update the paths to kitty and its icon in kitty.desktop.
      ansible.builtin.shell:
        cmd: |
          sed -i "s|Icon=kitty|Icon=$(readlink -f ~)/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty.desktop
          sed -i "s|Icon=kitty|Exec=$(readlink -f ~)/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty.desktop

    - name: Make xdg-terminal-exec (and hence desktop environments that support it use kitty)
      ansible.builtin.shell:
        cmd: echo "kitty.desktop" > ~/.config/xdg-terminals.list
        

