- name: Ensure that Go binary is not installed globally.
  ansible.builtin.file:
    path: /usr/local/go
    state: absent

- name: Set arch fact as arm64 (for test purposes).
  ansible.builtin.set_fact:
    arch: arm64

- name: Download Golang binary based on given arch.
  ansible.builtin.get_url:
    url: "{{ lookup('vars', 'go_linux_' + arch + '_binary_url') }}"
    dest: /tmp

- name: Install Golang.
  become_user: "{{ lookup('env', 'USER') }}"
  block:
    - name: Ensure that binary and 3rd party package locations exist for $USER.
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - ~/bin
        - ~/bin/go-packages

    - name: Unarchive the binary from download.
      ansible.builtin.unarchive:
        remote_src: true
        src: /tmp/{{ lookup('vars', 'go_linux_' + arch + '_binary_name') }}.tar.gz
        dest: ~/bin

    - name: Ensure that Go binary is added to $PATH, along with $GOPATH.
      ansible.builtin.blockinfile:
        path: ~/.config/zsh/.zshrc
        marker_begin: Go binary lookup -
        insertafter: "PATH="
        block: |
          export GOPATH=$HOME/bin/go-packages
          export PATH=$HOME/bin/go/bin:$HOME/bin/go-packages/bin:$PATH
        prepend_newline: true

- name: Remove the temporary files.
  ansible.builtin.file:
    path: /tmp/{{ lookup('vars', 'go_linux_' + arch + '_binary_name') }}.tar.gz
    state: absent

- name: Verify Golang installation.
  block:
    - name: Get info about Golang version.
      become_user: "{{ lookup('env', 'USER') }}"
      ansible.builtin.shell:
        cmd: ~/bin/go/bin/go version
      register: go_version_out

    - name: Ensure that the version output exists.
      ansible.builtin.debug:
        msg: "Golang is installed successfully."
      when: go_version_out.stdout is defined
