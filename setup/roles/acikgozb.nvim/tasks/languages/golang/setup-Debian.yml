- name: Remove old Go binary.
  ansible.builtin.file:
    path: /usr/local/go
    state: absent

- name: Set arch fact as arm64 (for test purposes).
  ansible.builtin.set_fact:
    arch: arm64

- name: Download Go binary based on given arch.
  ansible.builtin.get_url:
    url: "{{ lookup('vars', 'go_linux_' + arch + '_binary_url') }}"
    dest: /tmp

- name: Unarchive the binary from download.
  ansible.builtin.unarchive:
    remote_src: true
    src: /tmp/{{ lookup('vars', 'go_linux_' + arch + '_binary_name') }}.tar.gz
    dest: /usr/local

- name: Remove the temporary files.
  ansible.builtin.file:
    path: /tmp/{{ lookup('vars', 'go_linux_' + arch + '_binary_name') }}.tar.gz
    state: absent

- name: Verify Golang installation.
  block:
    - name: Get info about Golang version.
      ansible.builtin.shell:
        cmd: /usr/local/go/bin/go version
      register: go_version_out

    - name: Ensure that the version output exists.
      ansible.builtin.debug:
        msg: "Golang is installed successfully."
      when: go_version_out.stdout is defined
